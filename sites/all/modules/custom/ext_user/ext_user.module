<?

define('ROLE_ADMIN', 3);

/**
 * Implements hook_init().
 */
function ext_user_init()
{
  if (user_is_logged_in()) {
    if ((arg(0) == "user" && !arg(1)) || (arg(0) == "user" && is_numeric(arg(1)) && arg(2) != 'edit' && !user_has_role(ROLE_ADMIN))) {
      drupal_goto('user/' . $GLOBALS['user']->uid . '/edit/main');
    }
  }
}


/**
 * hook_module_implements_alter
 * change hook execution order, commerce_helper - last
 */
function ext_user_module_implements_alter(&$implementations, $hook)
{
  // Name of the hook.
  if (in_array($hook, ['form_alter', 'translated_menu_link_alter'])) {
    // ext_user - last
    $module = 'ext_user';
    if (isset($implementations[$module])) {
      $group = $implementations[$module];
      unset($implementations[$module]);
      $implementations[$module] = $group;
    }
  }
}


/**
 * Implements hook_menu_link_alter().
 *
 * By catching that function, we can set the special alter option
 * that will let our module receive a call whenever the menu is
 * ready for display but was not yet displayed. At that time we
 * can mark the access as FALSE.
 */
function ext_user_menu_link_alter(&$item)
{
  // TODO: The following marks ALL menu items as alterable. Any time a menu item
  // is saved, it is marked as such. I have no clue, at this time, of a way to
  // avoid such nonsense. Hints welcome!
  $item['options']['alter'] = TRUE;
}

/**
 * Implements hook_translated_menu_link_alter().
 *
 * Before a menu item gets displayed, the core calls the hook:
 * hook_translated_menu_link_alter(&$item, $map);
 * (but only if $item['options']['alter'] is TRUE)
 *
 * This function is used to alter the access right based on
 * the role definition of the item.
 */
function ext_user_translated_menu_link_alter(&$item, $map)
{
  // изменить ссылку в главном меню
  // работает только в связке с  $item['options']['alter'] = TRUE; в ext_user_menu_link_alter
  if ($item['access'] && $item["link_path"] == 'user' && arg(0) == 'user' && arg(2) == 'edit') {
    if (arg(3) == 'main') {
      $link = 'user/' . $GLOBALS['user']->uid . '/edit';
      $title = 'Пароль';
    } else {
      $link = 'user/' . $GLOBALS['user']->uid . '/edit/main';
      $title = 'Редактировать';
    }
    $item['link_path'] = $link;
    $item['router_path'] = $link;
    $item['href'] = $link;
    $item["link_title"] = $title;
    $item["title"] = $title;
  }
}


/**
 * Implements hook_form_alter().
 */
function ext_user_form_user_profile_form_alter(&$form, &$form_state)
{
  if (!user_has_role(ROLE_ADMIN)) {
    $form["actions"]["submit"]['#attributes']['class'] = ['btn', 'btn-brand'];
    $form["actions"]["submit"]['#value'] = 'Сохранить';

    if ($form["#user_category"] == 'account') {
      $form['#prefix'] =  '<div class="user-auth-form-wrapper">';
      $form['#prefix'] .= '<h1>Смена пароля</h1>';
      $form['#suffix'] = '</div>';
      if (isset($form["account"]["pass"])) {
        $form["account"]["current_pass"]["#title"] = 'Старый пароль';
        $form["account"]["current_pass"]["#description"] = 'Для смены сначала введите текущий пароль';
        $form["account"]["pass"]["#title"] = 'Новый пароль';
        $form["account"]["pass"]["#description"] = '';
        $form["account"]["pass"]["#type"] = 'password';
      }
      $form["locale"]["#access"] = false;
      $form["mimemail"]["#access"] = false;
      $form["timezone"]["#access"] = false;
      $form["account"]["mail"]["#access"] = false;

      $form["actions"]["submit"]['#attributes']['class'][] = 'btn-wide';
      $form["recovery"] = [
        '#markup' => '<a class="recovery-link" href="/user/password" title="Восстановить пароль через e-mail">Восстановить пароль через e-mail</a>',
        '#weight' => 999,
      ];
    }
    if ($form["#user_category"] == 'main') {
      $form['#prefix'] = '<h1>Карта пользователя</h1>';
      $form["pass"]["#type"] = 'hidden'; // костыль для модуля rpt, который не знает про модуль profile2
      $form["profile_main"]["field_user_photo"]["und"][0]["#description"] = '';
      $form["profile_main"]["field_company_logo"]["und"][0]["#description"] = '';
      $form['#theme'] = 'card_user_profile_form';
      if (empty($form["profile_main"]["field_user_email"]["und"][0]["value"]["#default_value"])) {
        $form["profile_main"]["field_user_email"]["und"][0]["value"]["#default_value"] = $GLOBALS['user']->mail;
      }
      // подавить статусные сообщения при загрузке картинок
      if (isset($form_state["triggering_element"])
          && (strpos($form_state["triggering_element"]["#name"], 'profile_main_field_user_photo') !== false
              || strpos($form_state["triggering_element"]["#name"], 'profile_main_field_company_logo') !== false))
      {
        unset($_SESSION['messages']['status']);
      }
    }
    $form["#submit"][] = 'ext_user_user_profile_form_submit';
  }
}

function ext_user_user_profile_form_submit ($form, &$form_state)
{
  $form_state['redirect'] = '/card/' . $GLOBALS['user']->uid;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ext_user_form_user_register_form_alter(&$form, &$form_state)
{
  $form['#prefix'] = '<div class="user-auth-form-wrapper">' .
        '<h1>Для создания электронной визитной карты укажите Ваш e-mail</h1>';
  $form['#suffix'] = '</div>';

  $form['account']['mail']['#attributes']['placeholder'] = 'E-Mail';
  unset($form['account']['mail']['#title']);
  unset($form['account']['mail']['#description']);
  $form["actions"]["submit"]['#value'] = 'Далее';
  $form["actions"]["submit"]['#attributes']['class'] = ['btn', 'btn-brand', 'btn-wide'];

  $form["fz152_agreement"]["#weight"] = 999;

  $form['account']['name']['#type'] = 'hidden';
  $form['account']['name']['#value'] = 'ext_user_' . user_password();

  $form['#submit'][] = 'ext_user_user_register_form_submit';
}

function ext_user_user_register_form_submit($form, &$form_state)
{
  $form_state['redirect'] = 'user/' . $GLOBALS['user']->uid . '/edit/main';
}

/**
 * Implements hook_user_insert().
 */
function ext_user_user_insert(&$edit, &$account, $category = NULL)
{
  // при регистрации нового пользователя установить уникальное имя: Пользователь #uid
  $new_name = t('User ') . $account->uid;

  db_update('users')
    ->fields(array('name' => $new_name))
    ->condition('uid', $account->uid)
    ->execute();

  $edit['name'] = $new_name;
  $account->name = $new_name;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ext_user_form_user_pass_alter(&$form, &$form_state)
{
  $form['#prefix'] = '<div class="user-auth-form-wrapper">' .
                      '<h1>Восстановление пароля</h1>';
  $form['#suffix'] = '</div>';
  $form["mail"]["#markup"] = 'Ссылка для восстановления пароля будет выслана на E-Mail <em class="placeholder">support@kccc.ru</em>.<br>Перед тем, как воспользоватся ссылкой, выйдите из аккаунта.';
  $form["actions"]["submit"]['#value'] = 'Выслать ссылку для восстановления';
  $form["actions"]["submit"]['#attributes']['class'] = ['btn', 'btn-brand', 'btn-wide'];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ext_user_form_user_login_alter(&$form, &$form_state)
{
  $form['#prefix'] =  '<div class="user-auth-form-wrapper">';
  $form['#prefix'] .= '<h1>Войти с паролем</h1>';
  $form['#suffix'] = '</div>';

  $form['name']['#title'] = t('E-Mail');
  $form['name']['#element_validate'][] = 'ext_user_login_name_validate';
  $form["pass"]["#title"] = 'Пароль';
  unset($form['name']['#description']);
  unset($form['pass']['#description']);
  $form["actions"]["submit"]['#value'] = 'Далее';
  $form["actions"]["submit"]['#attributes']['class'] = ['btn', 'btn-brand', 'btn-wide'];
}

/**
 * Form element validation handler for the user login form.
 * Allows users to authenticate by username OR email.
 */
function ext_user_login_name_validate($form, &$form_state)
{
  $user = ext_user_user_load_by_login($form_state['values']['name']);
  if ($user->uid) {
    $form_state['values']['name'] = $user->name;
    return TRUE;
  }

  return FALSE;
}

/**
 * Загрузить пользователя по указанному логину
 */
function ext_user_user_load_by_login($login)
{
  // Try loading by email.
  if ($user = user_load_by_mail($login)) {
    return $user;
  }

  // Try loading by username.
  if ($user = user_load_by_name($login)) {
    return $user;
  }
  return user_load(0);
}


function ext_user_process_page(&$vars)
{
  if (arg(0) == 'user') {
    $vars['title'] = '';
    if (arg(2) == 'edit') {
//      if (arg(3) == 'main') {
//        $vars['title'] = '';
//      }
//      else {
//        $vars['title'] = 'Аккаунт';
//      }
    }
    if (isset($vars["tabs"])) {
      unset($vars["tabs"]);
    }
  }
}
